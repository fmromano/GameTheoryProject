%Comparison between methods script

% Functions are in the directory above
addpath('../');

clc
clear all
close all
format compact


%% All of the different examples
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % Create inputs to algorithm
%     % The nth row is the nth computer's list of number of cores of each type that are available.
%     % The number of rows should be the number of computers.
%     % The number of columns should be the number of types of cores.
%     coreAvailabilityMatrix = [
%         8,      7,      6,     ;...
%         1,      23,     3,     ;...
%         14,     8,      2,     ;...
%         23,     12,     18,    ;...
%         5,      25,     13,    ;...
%     ];
%     % The nth row is the nth job's list of speed ratios for the each core type.
%     % The number of rows should be the number of jobs.
%     % The number of columns should be the number of types of cores.
%     speedMatrix = [
%         30,     41,     22,    ;...
%         12,     13,     3,     ;...
%         1,      28,     42,    ;...
%         20,     22,     6,     ;...
%         25,     2,      66,    ;...
%         40,     41,     62,    ;...
%         42,     13,     6,     ;...
%         4,      38,     62,    ;...
%         40,     32,     2,     ;...
%         45,     3,      26,    ;...
%         40,     31,     22,    ;...
%         52,     33,     2,     ;...
%         5,      38,     42,    ;...
%         50,     32,     1,     ;...
%         55,     2,      16,    ;...
%     ];
% 
% % The nth element is the max number of cores that can be used by job n.
%     % The number of columns should be the number of jobs.
% maxNumCoresMatrix = [8,20,10,4,1,3,27,14,50,8,40,13,4,18,30];%,58,32,33,41,14,21]
    
%     % The nth row is the nth computers list of number of cores of each type that are available.
%     % The number of rows should be the number of computers.
%     % The number of columns should be the number of types of cores.
%     coreAvailabilityMatrix = [
%     8, 7, 6; ...
%     1, 23, 3; ...
%     14, 8, 2; ...
%     23, 8, 10,; ...
%     10, 0, 10,; ...
%     ];
%     % The nth row is the nth job's list of speed ratios for the each core type.
%     % The number of rows should be the number of jobs.
%     % The number of columns should be the number of types of cores.
%     speedMatrix = [
%     30, 41, 22; ...
%     12, 13, 3; ...
%     1, 28, 42; ...
%     20, 22, 1,; ...
%     25, 2, 16,; ...
%     ];
%     % The nth element is the max number of cores that can be used by job n.
%     % The number of columns should be the number of jobs.
%     maxNumCoresMatrix = [8,20,10,1,50];

%Random Runs
coreAvailabilityMatrix = ceil(25.*rand(14,3))
speedMatrix = ceil(100.*rand(14,3))
maxNumCoresMatrix = ceil(50.*rand(1,14))

%% Run The different algorithms

%Apply for first preference
[resultMatrixSM] = simpleMatching(coreAvailabilityMatrix, ...
    speedMatrix, maxNumCoresMatrix);
[rawTimeScoresSM,percentThreadsUsedSM,adjustedTimeScoresSM] = ...
    speedCalc(resultMatrixSM, coreAvailabilityMatrix, speedMatrix, maxNumCoresMatrix);

%Deferred Acceptance with quotas = TotalNumberOfJobs/TotalNumberOfComputers
[resultMatrixDA1] = deferredAcceptance(coreAvailabilityMatrix, ...
    speedMatrix, maxNumCoresMatrix);
[rawTimeScoresDA1,percentThreadsUsedDA1,adjustedTimeScoresDA1] = ...
    speedCalc(resultMatrixDA1, coreAvailabilityMatrix, speedMatrix, maxNumCoresMatrix);

%Deferred Acceptance where matchings are based on the number of cores
%available
[resultMatrixDA2] = deferredAcceptance2(coreAvailabilityMatrix, ...
    speedMatrix, maxNumCoresMatrix);
[rawTimeScoresDA2,percentThreadsUsedDA2,adjustedTimeScoresDA2] = ...
    speedCalc(resultMatrixDA2, coreAvailabilityMatrix, speedMatrix, maxNumCoresMatrix);

%Deferred Acceptance where each round is looking for a best match
[resultMatrixPA] = proposedAlgorithm(coreAvailabilityMatrix, ...
    speedMatrix, maxNumCoresMatrix);
[rawTimeScoresPA,percentThreadsUsedPA,adjustedTimeScoresPA] = ...
    speedCalc(resultMatrixPA, coreAvailabilityMatrix, speedMatrix, maxNumCoresMatrix);

%% Compile the results
allPercents = [percentThreadsUsedSM;percentThreadsUsedDA1;percentThreadsUsedDA2;percentThreadsUsedPA];
allRawScores = [rawTimeScoresSM(2,:);rawTimeScoresDA1(2,:);rawTimeScoresDA2(2,:);rawTimeScoresPA(2,:)];
allScores = [adjustedTimeScoresSM;adjustedTimeScoresDA1;adjustedTimeScoresDA2;adjustedTimeScoresPA];

percentJobsAssigned = zeros(4,1);
totalJobs = length(maxNumCoresMatrix);

for iLoop = 1:length(percentJobsAssigned)
    percentJobsAssigned(iLoop) = nnz(allPercents(iLoop,:))/totalJobs;
end

averageTimeScore = zeros(4,1);

for jLoop = 1:length(averageTimeScore)
    averageTimeScore(jLoop) = mean(nonzeros(allScores(jLoop,:)));
    
end
